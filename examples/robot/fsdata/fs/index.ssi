<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no">
		<link rel="stylesheet" type="text/css" href="css/siimple.min.css">
		<link rel="stylesheet" type="text/css" href="css/style.css">
		<link rel="shortcut icon" href="img/favicon.png">
		<title>My little robot!</title>
	</head>
	<body>
		<div class="grid main">
			<h1 align="center">My little robot</h1>

			<div id="status_box" class="alert alert-info">Loading..</div>

			<div class="cover" align="center">
				<hr><h2>Status</h2>
				<table class="table table-striped">
					<tr>
						<td><b>Distance from obstacle:</b></td>
						<td id="us_left"></td>
						<td id="us_right"></td>
					</tr>
					<tr>
						<td><b>LED state:</b></td>
						<td id="led"></td>
					</tr>
					<tr>
						<td><b>Uptime:</b></td>
						<td id="uptime"></td>
					</tr>
					<tr>
						<td><b>Free heap:</b></td>
						<td id="heap"></td>
					</tr>
				</table>
			</div>
			<div class="cover" align="center">
 				<hr><h2>Motor Control</h2>
				<div class="wrapper">
					<div class="box forward"><button name="forward" onclick="motor_ctrl('forward')">Forward</button></div>
					<div class="box left"><button name="left" onclick="motor_ctrl('left')">Left</button></div>
					<div class="box stop"><button name="stop" onclick="motor_ctrl('stop')">Stop</button></div>
					<div class="box right"><button name="right" onclick="motor_ctrl('right')">Right</button></div>
					<div class="box backward"><button name="backward" onclick="motor_ctrl('backward')">Backward</button></div>
				</div>
			</div>

			<div class="cover" align="center">
				<hr><h2>LED Control</h2>
				<table class="table table-striped" id="led_color" height="50" width="200">
				<tr>
					<td>RED:<input type="number" name="red" value="50" min="0" max="255" width="40" height="40" id="led-red"></td>
					<td>GREEN:<input type="number" name="green" value="50" min="0" max="255" width="40" height="40" id="led-green"></td>
					<td>BLUE:<input type="number" name="blue" min="0" value="50" max="255" width="40" height="40" id="led-blue"></td>
				</tr>
				</table>
				<table class="table table-striped" id="led_mode" height="50" width="200">
				<tr>
					<td>Light:<input type="radio" name="led-mode" value="light" checked="yes"/></td>
					<td>Scroll:<input type="radio" name="led-mode" value="scroll"/></td>
					<td>Dimm:<input type="radio" name="led-mode" value="dimm"/></td>
				</tr>
				</table>
				<div class="onoffswitch">
					<input type="checkbox" name="onoffswitch" class="onoffswitch-checkbox" id="led-switch" onclick="gpio()">
					<label class="onoffswitch-label" for="led-switch">
						<span class="onoffswitch-inner"></span>
						<span class="onoffswitch-switch"></span>
					</label>
				</div>
			</div>

		</div>

		<script type="text/javascript" src="js/smoothie_min.js"></script>
		<script>
			var ws;
			var retries;
			var series = new TimeSeries();
			window.onload = function() {
				wsOpen();
			}
			function setMsg(cls, text) {
				sbox = document.getElementById('status_box');
				sbox.className = "alert alert-" + cls;
				sbox.innerHTML = text;
				console.log(text);
			}
			function onMessage(evt) {
				retries = 0;
				var dv = new DataView(evt.data);
				var val = dv.getUint16(0);
				if (val == 0xBEEF || val == 0xDEAD)
					console.log("LED switched");
				else
					series.append(new Date().getTime(), val);
			}
			function wsOpen() {
				if (ws === undefined || ws.readyState != 0) {
					if (retries)
						setMsg("error", "WebSocket timeout, retrying..");
					else
						setMsg("info", "Opening WebSocket..");
					ws = new WebSocket("ws://" + location.host);
					ws.binaryType = 'arraybuffer';
					ws.onopen = function(evt) { retries = 0; setMsg("done", "WebSocket is open."); };
					ws.onerror = function(evt) { setMsg("error", "WebSocket error!"); };
					ws.onmessage = function(evt) { onMessage(evt); };
					wsOpenStream();
					retries = 0;
				}
			}
			function wsOpenStream() {
				var uri = "/stream"
				var ws = new WebSocket("ws://" + location.host + uri);
				ws.onmessage = function(evt) {
					console.log(evt.data);
					var stats = JSON.parse(evt.data);
					console.log(stats);
					document.getElementById('uptime').innerHTML = stats.uptime + ' seconds';
					document.getElementById('heap').innerHTML = stats.heap + ' bytes';
					document.getElementById('led').innerHTML = (stats.led == 1) ? 'On' : 'Off';
					document.getElementById('us_left').innerHTML = 'left: ' + stats.us_left + ' cm(s)';
					document.getElementById('us_right').innerHTML = 'right: ' + stats.us_right + ' cm(s)';
				};
			}
			function wsWrite(data) {
				if (ws.readyState == 3 || retries++ > 5)
					wsOpen();
				else if (ws.readyState == 1)
					ws.send(data);
			}
			function getRadioVal(radios) {
				var val;
				for (var i=0, len=radios.length; i<len; i++) {
			        if ( radios[i].checked ) {
			            val = radios[i].value;
			            break;
			        }
			    }
			    return val;
			}
			function gpio() {
				var red = document.getElementById('led-red').value;
				var green = document.getElementById('led-green').value;
				var blue = document.getElementById('led-blue').value;
				var rgb_color = red << 16 | green << 8 | blue;
				if (document.getElementById('led-switch').checked) {
					rval = getRadioVal(document.getElementsByName("led-mode"));
					if (rval == "scroll")
						wsWrite('S' + rgb_color.toString());
					else if (rval == "dimm")
						wsWrite('M' + rgb_color.toString());
					else
						wsWrite('E' + rgb_color.toString());
				} else
					wsWrite('D');
			}
			function motor_ctrl(event) {
				if (event == "forward")
					wsWrite('F');
				else if (event == "backward") 
					wsWrite('B');
				else if (event == "left") 
					wsWrite('L');
				else if (event == "right") 
					wsWrite('R');
				else if (event == "stop") 
					wsWrite('P');
			}
		</script>
	</body>
</html>
